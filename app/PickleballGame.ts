// generated by co-pilot PickleballGame.ts
export class PickleballGame {
  player1Score!: number;
  player2Score!: number;
  winningScore!: number;
  winningScoreDifference!: number;
  currentServer!: string;
  result!: string;
  startTime!: Date | null;
  gameDuration!: string;

  constructor() {
    this.initializeGame();
  }

  // Method to initialize the game state
  private initializeGame() {
    this.player1Score = 0;
    this.player2Score = 0;
    this.currentServer = "Player 1"; // Can be either "Player 1" or "Player 2"
    this.result = "";
    this.winningScore = 11; // TODO pass this in as a parameter
    this.winningScoreDifference = 2; // TODO pass this in as a parameter
    this.startTime = new Date();
    this.gameDuration = "";
  }

  // Method to score a point for the current server
  scorePoint() {
    if (this.currentServer === "Player 1") {
      this.player1Score++;
    } else {
      this.player2Score++;
    }
    this.checkWin();
  }

  // Undo point / play a let
  resetPoint() {
    if (this.currentServer === "Player 1" && this.player1Score > 0) {
      this.player1Score--;
    } else if (this.currentServer === "Player 2" && this.player2Score > 0) {
      this.player2Score--;
    }
    this.checkWin();
  }

  getResults() {
    return this.result;
  }

  // Method to switch server
  switchServer() {
    this.currentServer =
      this.currentServer === "Player 1" ? "Player 2" : "Player 1";
  }

  // Method to check if there's a winner
  private checkWin() {
    if (this.isPlayer1Winner()) {
      this.calculateGameDuration();
      this.result = "Player 1 wins! in " + this.gameDuration;
    } else if (this.isPlayer2Winner()) {
      this.calculateGameDuration();
      this.result = "Player 2 wins! in " + this.gameDuration;
    }
  }

  private isPlayer1Winner(): boolean {
    return (
      this.player1Score >= this.winningScore &&
      this.player1Score - this.player2Score >= this.winningScoreDifference
    );
  }

  private isPlayer2Winner(): boolean {
    return (
      this.player2Score >= this.winningScore &&
      this.player2Score - this.player1Score >= this.winningScoreDifference
    );
  }

  // Method to reset the game
  resetGame() {
    this.initializeGame();
  }

  // Method to get the current score
  getScore() {
    return [
      { player1Score: this.player1Score, player2Score: this.player2Score },
    ];
  }

  // Method to calculate game duration
  private calculateGameDuration() {
    if (this.startTime) {
      const endTime = new Date();
      const duration = endTime.getTime() - this.startTime.getTime();
      const minutes = Math.floor(duration / 60000);
      const seconds = ((duration % 60000) / 1000).toFixed(0);
      this.gameDuration = `${minutes} minutes and ${seconds} seconds`;
    }
  }

  // Method to get the game duration
  getGameDuration() {
    return this.gameDuration;
  }
}
